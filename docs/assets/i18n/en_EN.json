{
  "container": "Container",
  "child": "Child",
  "example": "Example",
  "examples": "Examples",
  "result": "Result",
  "home": {
    "getStarted": "Introduction to CSS Layouts",
    "introduction": "<span class='brick'><b>CSS Layout Lab</b></span> is an interactive space to learn and experiment with the different ways of <b>building layouts</b> in <b>CSS</b>: from classic models like <span class='brick'><b>block</b></span> and <span class='brick'><b>inline</b></span>, to modern tools like <span class='brick'><b>flexbox</b></span> and <span class='brick'><b>grid</b></span>.",
    "description": "<span class='brick'><b>CSS Layout Lab</b></span> provides <span class='moss'><b>clear documentation</b></span> and <span class='moss'><b>dynamic examples</b></span>, with which you can modify values and see in <span class='moss'><b>real time</b></span> how the arrangement of <span class='moss'><b>elements</b></span> <span class='moss'><b>adjusts</b></span>, gaining a better understanding of the possibilities of each approach and how to apply them in your projects.",
    "example": {
      "title": "Learn visually with practical and dynamic examples",
      "description": "To <span class='blue'><b>make it easier</b></span> to understand the content and provide a <span class='blue'><b>visual aid</b></span> to users while learning different techniques to build <span class='blue'><b>layouts</b></span>, we decided to use the metaphor of <span class='brick'><b>bricks</b></span> in each <span class='blue'><b>example</b></span>. To avoid verbosity in the code, in the examples we only show the relevant information, but here I’ll show you how you can create a <span class='brick'><b>brick</b></span> with <span class='blue'><b>CSS</b></span>. I hope you enjoy the content!"
    },
    "aboutMe": {
      "title": "About Me",
      "description": "<p>After many years working in web development, <b>CSS continues to amaze me with its possibilities and constant innovations</b>. One of its most important and frequent uses is <b>layout management</b>, which allows you to organize and distribute the elements of a page in a flexible and precise way.</p><p>That's why I created this documentation, where I try to explain in a simple way <b>how to create layouts with CSS</b> and how to apply different techniques depending on the needs of each project.</p><p>This tutorial is designed for all kinds of developers, from <b>juniors</b> to <b>experts</b>. Some may discover basic concepts for the first time, while others can see in practice how certain properties behave, which are often handled by libraries like <b>Bootstrap</b>, exploring <b>Grid</b> and <b>Flexbox</b> directly.</p><p>I hope you enjoy it!</p>"
    }
  },
  "basicConcepts": {
    "title": "Introduction to CSS Layouts",
    "title2": "Introduction",
    "description": "<p>In <b>CSS</b>, a <span class='brick'><b>layout</b></span> is the way <b>elements</b> are <b>organized</b> and <b>distributed</b> within a page or section. It determines where elements are placed, how they are <b>aligned</b> with each other, and how they <b>adapt</b> to the screen size.</p><p>Our goal is to show, through <b>simple</b> and comparative examples, how to <b>align</b> elements both <b>horizontally</b> and <b>vertically</b>, how to <b>organize</b> different sections of a page, and in which situations each technique is best applied.</p><p>We want to help you <b>visualize</b>, <b>practice</b>, and <b>understand</b> the essentials to <b>improve</b> your <b>designs</b> and write <b>CSS</b> with greater <b>confidence</b> and <b>clarity</b>.</p><p>Before diving into <span class='brick'><b>block</b></span>, <span class='brick'><b>inline-block</b></span>, <span class='brick'><b>flex</b></span>, or <span class='brick'><b>grid</b></span>, it is essential to understand some <b>key concepts</b> that determine how elements are <b>positioned</b> and <b>behave</b> within a <b>web page</b>.</p>",
    "boxModel": {
      "title": "<i class='moss bi bi-1-circle'></i> Box Model",
      "description": "Every element in <b>HTML</b> is a <b>box</b>. This model defines how the space occupied by an element is calculated:",
      "item1": "<b>margin</b>:&nbsp; The outer space, between this box and others.",
      "item2": "<b>border</b>:&nbsp; The border surrounding the content and padding of an element, customizable in thickness, style, and color.",
      "item3": "<b>padding</b>:&nbsp; The inner space between the content and the border.",
      "item4": "<b>content</b>:&nbsp; The element’s content (text, image, etc.)."
    },
    "display": {
      "title": "<i class='moss bi bi-2-circle'></i> Display",
      "description": "The <b>display</b> property determines how the <b>box behaves</b>. It can be:",
      "item1": "<b>block</b>: Occupies the full available width and starts on a new line.",
      "item2": "<b>inline</b>: Does not start on a new line and only takes the necessary space.",
      "item3": "<b>inline-block</b>: Like inline, but allows defining width, height, etc.",
      "item4": "<b>flex and grid</b>: Modern layout systems (we’ll see them in detail later)."
    },
    "axis": {
      "title": "<i class='moss bi bi-3-circle'></i> Rows and Columns",
      "description": "When we talk about <b>flex</b> or <b>grid</b>, we must think in terms of <b>rows</b> and <b>columns</b>.",
      "item1": "In <b>flex</b>, elements are arranged in a single row or column, depending on <b>flex-direction</b>.",
      "item2": "In <b>grid</b>, they can be arranged in <b>rows</b> and <b>columns</b> simultaneously.",
      "item3": "Understanding this structure helps control how <b>child</b> elements are <b>aligned</b> and <b>distributed</b>."
    },
    "containers": {
      "title": "<i class='moss bi bi-4-circle'></i> Container and child",
      "description": "A layout always has a hierarchy:",
      "item1": "The <b>container</b> is the parent element that defines the <b>context</b> (display: flex, grid, etc).",
      "item2": "The <b>child</b> elements behave according to the rules of that context."
    },
    "gap": {
      "title": "<i class='moss bi bi-5-circle'></i> Gap",
      "description": "The <b>gap</b>, <b>row-gap</b>, and <b>column-gap</b> properties allow control of the <b>spacing between elements</b> in a <b>flex</b> or <b>grid</b> container:",
      "item1": "<b>gap</b>:&nbsp; Defines uniform spacing between rows and columns.",
      "item2": "<b>row-gap</b>:&nbsp; Defines only the spacing between rows.",
      "item3": "<b>column-gap</b>:&nbsp; Defines only the spacing between columns.",
      "item4": "These properties replace the use of <code>margin</code> on children, making the layout cleaner and more predictable."
    },
    "responsive": {
      "title": "<i class='moss bi bi-6-circle'></i> Responsiveness",
      "description": "Nowadays, websites must be <b>adaptable</b>, able to adjust to <b>different screen sizes</b>, from mobile devices to large monitors. Modern properties like <b>flex</b> and <b>grid</b> allow creating layouts that <b>automatically reorganize</b>. This makes it easier to build <b>fluid</b>, <b>consistent</b>, and more <b>maintainable</b> designs."
    },
    "units": {
      "title": "<i class='moss bi bi-7-circle'></i> Units in CSS",
      "description": "In <b>CSS</b> there are several <b>basic units</b> used to define measures such as sizes, margins, paddings, fonts, etc. They are divided into <b>absolute</b> and <b>relative</b> units.",
      "absolutes": {
        "title": "<span class='gray title-small'>Absolute Units</span>",
        "description": "These <b>do not change</b> depending on context; they always measure the same.",
        "item1": "<b>px (pixels)</b>:&nbsp; Fixed unit, ideal for precise details.",
        "item2": "<b>cm, mm, in (centimeters, millimeters, inches)</b>:&nbsp; More common in print.",
        "item3": "<b>pt (points)</b>:&nbsp; Used in typography, 1pt = 1/72 of an inch.",
        "item4": "<b>pc (picas)</b>:&nbsp; 1pc = 12pt, also in typography.",
        "item5": "<b>q (quarter millimeters)</b>:&nbsp; 1q = 0.25mm, used in print."
      },
      "relatives": {
        "title": "<span class='gray title-small'>Relative Units</span>",
        "description": "These <b>change</b> depending on context, such as screen size or font size.",
        "item1": "<b>% (percentage)</b>:&nbsp; Relative to the parent element. Very useful for fluid layouts.",
        "item2": "<b>em</b>:&nbsp; Relative to the parent’s font size. 2em = 2 times the parent’s font size.",
        "item3": "<b>rem</b>:&nbsp; Relative to the root font size (usually html). More predictable than em.",
        "item4": "<b>vw (viewport width)</b>:&nbsp; 1vw = 1% of the viewport width. Useful for responsive designs.",
        "item5": "<b>vh (viewport height)</b>:&nbsp; 1vh = 1% of the viewport height.",
        "item6": "<b>vmin</b>:&nbsp; The smaller value between vw and vh.",
        "item7": "<b>vmax</b>:&nbsp; The larger value between vw and vh.",
        "item8": "<b>svw / svh</b>:&nbsp; small viewport (useful on mobile with dynamic bars).",
        "item9": "<b>lvw / lvh</b>:&nbsp; Represents the maximum possible viewport size, as if navigation bars (browser top or bottom) were hidden.",
        "item10": "<b>dvw / dvh</b>:&nbsp; Represents the current viewport size, which changes when browser bars appear or disappear."
      }
    }
  },
  "blockInline": {
    "title": "Block & Inline",
    "description": "<p><span class='brick'><b>Block</b></span>, <span class='brick'><b>Inline</b></span> and <span class='brick'><b>Inline-block</b></span> are <b>display models</b> that define how <b>HTML elements</b> are <b>arranged</b> and <b>occupy space</b> on the page, controlling their <b>flow</b>, <b>alignment</b>, and <b>dimensions</b>.</p>",
    "block": {
      "title": "<i class='moss bi bi-box'></i> Block",
      "description": "<b>Block</b> elements behave as <b>full blocks</b>:",
      "item1": "They start on a <b>new line</b>.",
      "item2": "By default, they occupy <b>all available width</b>.",
      "item3": "They allow defining <b>width</b>, <b>height</b>, <b>margin</b>, <b>padding</b> without issues.",
      "item4": "They are <b>ideal</b> when you need elements to <b>stack vertically</b> and want to control <b>size</b> and <b>spacing</b>.",
      "defaultElements": "HTML elements that are <span class='brick'><b>block</b></span> by <span class='moss'><b>default</b></span>:",
      "example": "<p>In this example we have a container that contains three children with the class <b>child</b> set as display <span class='brick'><b>block</b></span>, where each child occupies the <b>full possible width</b> of the <b>container</b> because they <b>do not</b> have a fixed <b>width</b>.</p><p><i class='moss bi bi-info-square'></i> The class <b>child</b> would not need to be explicitly set as display <span class='brick'><b>block</b></span> since by default, <b>div</b> elements are <span class='brick'><b>block</b></span> (this is done for teaching purposes).</p>"
    },
    "inline": {
      "title": "<i class='moss bi bi-reception-0'></i> Inline",
      "description": "<b>Inline</b> elements flow <b>in the same line as text</b>:",
      "item1": "They <b>do not</b> start on a <b>new line</b> and only occupy the <b>necessary width</b>.",
      "item2": "They can be <b>nested</b> inside <b>block</b> or <b>inline</b> elements.",
      "item3": "They <b>do not</b> allow box properties like <b>width, height, margin-top, margin-bottom</b>. Generally, you <b>cannot</b> set <b>width</b> or <b>height</b>, nor vertical margins. <b>You can</b> apply <b>padding</b> and <b>horizontal margin</b>.",
      "item4": "They can contain <b>only</b> text or <b>other</b> <b>inline</b> elements.",
      "item5": "They are <b>ideal</b> when you want content to <b>flow</b> inside a <b>paragraph</b>.",
      "defaultElements": "HTML elements that are <span class='brick'><b>inline</b></span> by <span class='moss'><b>default</b></span>:",
      "example": "<p>In this example we have a container that contains three children with the class <b>child</b> set as display <span class='brick'><b>inline</b></span>, where each child only occupies the <b>necessary width</b> of the <b>container</b>. We can see how the container’s <b>padding</b> <b>does not adjust</b> to the height of its children when they are <span class='brick'><b>inline</b></span> elements.</p><p><i class='moss bi bi-info-square'></i> The class <b>child</b> would not need to be explicitly set as display <span class='brick'><b>inline</b></span> since by default, <b>span</b> elements are <span class='brick'><b>inline</b></span> (this is done for teaching purposes).</p>"
    },
    "inlineBlock": {
      "title": "<i class='moss bi bi-reception-2'></i> Inline-Block",
      "description": "<b>Inline-block</b> elements combine characteristics of both <b>inline</b> and <b>block</b> elements:",
      "item1": "They flow <b>inline</b> like <b>inline</b> elements but allow <b>box dimensions</b> like <b>block</b> elements.",
      "item2": "They <b>align horizontally</b> with other inline or inline-block elements.",
      "item3": "They <b>do</b> accept properties like <b>width</b>, <b>height</b>, <b>padding</b>, and <b>margin</b> (both vertical and horizontal).",
      "item4": "They <b>do not</b> start on a new line but <b>respect their own size</b> within the inline flow.",
      "item5": "They are <b>ideal</b> for <b>small components</b> like buttons, cards, or boxes that need to <b>align horizontally</b> but at the same time behave like a <b>block</b>.",
      "defaultElements": "HTML elements that are <span class='brick'><b>inline-block</b></span> by <span class='moss'><b>default</b></span>:",
      "example": "<p>In this example we have a container that contains three children with the class <b>child</b> set as display <span class='brick'><b>inline-block</b></span>, where each child occupies the width and height set in its <b>configuration</b>. We can see how the container <b>adjusts</b> to the height of its children, unlike elements set as <span class='brick'><b>inline</b></span>.</p>"
    }
  },
  "flex": {
    "title": "Flex",
    "description": "<p><span class='brick'><b>Flex</b></span> (<b>Flexbox</b>) is a <b>one-dimensional</b> layout model that distributes elements in a <b>row</b> or <b>column</b>, with control over spacing and adaptive alignment (main axis) and (cross axis), achieving <b>flexible</b> and <b>responsive</b> designs. <span class='brick'><b>Flex</b></span> is <b>ideal</b> when you need to <b>align</b> elements on a single axis (horizontal or vertical) in a <b>flexible</b> way, <b>adapting</b> their size and position according to the <b>available space</b>.</p>",
    "direction": {
      "title": "<i class='moss bi bi-compass'></i> flex-direction",
      "description": "Controls how the <b>child</b> elements are <b>arranged</b> along the <b>main axis</b>:",
      "item1": "<b>row</b> (default):&nbsp; Places elements from left to right.",
      "item2": "<b>row-reverse</b>:&nbsp; Places elements from right to left.",
      "item3": "<b>column</b>:&nbsp; Places elements from top to bottom.",
      "item4": "<b>column-reverse</b>:&nbsp; Places elements from bottom to top.",
      "example": "<p>With this dynamic example, we give the user the opportunity to see the different <b>arrangements</b> of the <b>child</b> elements by modifying the <b>flex-direction</b> property in the <b>selector</b>.</p>",
      "select": "<i class='moss bi bi-hand-index'></i> Select <b>flex-direction</b>:"
    },
    "wrap": {
      "title": "<i class='moss bi bi-text-wrap'></i> flex-wrap</span>",
      "description": "Determines whether items should stay on a single line or wrap.",
      "item1": "<b>nowrap</b> (default):&nbsp; Everything on one line, even if it overflows.",
      "item2": "<b>wrap</b>:&nbsp; Items move to a new line if they don’t fit.",
      "item3": "<b>wrap-reverse</b>:&nbsp; Same as <b>wrap</b>, but wrapping occurs in reverse order.",
      "example": "<p>With this dynamic example, we give the user the opportunity to see the different <b>arrangements</b> of the <b>child</b> elements by modifying the <b>flex-wrap</b> property in the <b>selector</b>.",
      "select": "<i class='moss bi bi-hand-index'></i> Select <b>flex-wrap</b>:"
    },
    "justifyAlignRow": {
      "example": "<p>With this dynamic example, we give the user the opportunity to see the different <b>arrangements</b> of the <b>child</b> elements by modifying the <b>justify-content</b> and <b>align-items</b> properties in the <b>selectors</b>.</p>",
      "justify": {
        "title": "<i class='moss bi bi-arrows'></i> justify-content <span class='moss small'>(row)</span>",
        "description": "<b>justify-content</b> in a container with <b>flex-direction: row</b> <b>aligns</b> the child elements <b>horizontally</b> inside the <b>flex</b> container.",
        "item1": "<b>flex-start</b> (default):&nbsp; Aligns elements at the start (left).",
        "item2": "<b>center</b>:&nbsp; Centers elements horizontally.",
        "item3": "<b>flex-end</b>:&nbsp; Aligns elements at the end (right).",
        "item4": "<b>space-between</b>:&nbsp; Places the maximum possible space between elements.",
        "item5": "<b>space-around</b>:&nbsp; Places equal space around the elements.",
        "item6": "<b>space-evenly</b>:&nbsp; Places equal space between elements and around them.",
        "select": "<i class='moss bi bi-hand-index'></i> Select <b>justify-content</b>:"
      },
      "align": {
        "title": "<i class='moss bi bi-arrows-vertical'></i> align-items <span class='moss small'>(row)</span>",
        "description": "<b>align-items</b> in a container with <b>flex-direction: row</b> <b>aligns</b> the child elements <b>vertically</b>. <b>align-content</b> does the same as align-items but only when there are multiple rows (flex-wrap: wrap) and they have wrapped.",
        "item1": "<b>stretch</b> (default):&nbsp; Stretches elements to fill the container height.",
        "item2": "<b>flex-start</b>:&nbsp; Aligns all elements at the top.",
        "item3": "<b>center</b>:&nbsp; Centers elements vertically.",
        "item4": "<b>flex-end</b>:&nbsp; Aligns all elements at the bottom.",
        "item5": "<b>baseline</b>:&nbsp; Aligns elements along the text baseline.",
        "select": "<i class='moss bi bi-hand-index'></i> Select <b>align-items</b>:"
      }
    },
    "justifyAlignColumn": {
      "example": "<p>With this dynamic example, we give the user the opportunity to see the different <b>arrangements</b> of the <b>child</b> elements by modifying the <b>justify-content</b> and <b>align-items</b> properties in the <b>selectors</b>.</p>",
      "justify": {
        "title": "<i class='moss bi bi-arrows-vertical'></i> justify-content <span class='moss small'>(column)</span>",
        "description": "<b>justify-content</b> in a container with <b>flex-direction: column</b> <b>aligns</b> the child elements <b>vertically</b> inside the <b>flex</b> container.",
        "item1": "<b>flex-start</b> (default):&nbsp; Aligns all elements at the top of the container.",
        "item2": "<b>center</b>:&nbsp; Centers elements vertically.",
        "item3": "<b>flex-end</b>:&nbsp; Aligns all elements at the bottom of the container.",
        "item4": "<b>space-between</b>:&nbsp; First element at the top, last at the bottom, others spaced in between.",
        "item5": "<b>space-around</b>:&nbsp; Equal space between elements.",
        "item6": "<b>space-evenly</b>:&nbsp; Equal space between elements and around them.",
        "select": "<i class='moss bi bi-hand-index'></i> Select <b>justify-content</b>:"
      },
      "align": {
        "title": "<i class='moss bi bi-arrows'></i> align-items <span class='moss small'>(column)</span>",
        "description": "<b>align-items</b> in a container with <b>flex-direction: column</b> <b>aligns</b> the child elements <b>horizontally</b>.",
        "item1": "<b>stretch</b> (default):&nbsp; Elements <b>stretch horizontally</b> to the container’s width (if no fixed width is set).",
        "item2": "<b>flex-start</b>:&nbsp; Aligns all elements to the left.",
        "item3": "<b>center</b>:&nbsp; Centers elements horizontally.",
        "item4": "<b>flex-end</b>:&nbsp; Aligns all elements to the right.",
        "select": "<i class='moss bi bi-hand-index'></i> Select <b>align-items</b>:"
      }
    },
    "grow": {
      "title": "<i class='moss bi bi-0-square'></i> flex-grow</span>",
      "description": "Defines how a flex <b>item</b> <b>grows</b> to fill the available extra space in the <b>container</b>.",
      "item1": "Default value:&nbsp; 0 (<b>does not</b> grow).",
      "item2": "If you set a number <b>greater</b> than 0, the item will <b>grow proportionally</b> according to that <b>value</b>.",
      "example": "<p>In this example, we can see how the <b>item</b> with the class <b>child-1</b> has the <b>default</b> size because its <b>flex-grow</b> is <b>0</b>. In contrast, the other <b>items</b> <b>grow</b> in <b>proportion</b> to their <b>flex-grow</b> value, with <b>child-3</b> occupying <b>twice</b> the width of <b>child-2</b>.</p>"
    },
    "shrink": {
      "title": "<i class='moss bi bi-1-square'></i> flex-shrink</span>",
      "description": "Defines how a flex <b>item</b> <b>shrinks</b> when the <b>container</b> has less space than the <b>sum</b> of its <b>items</b>.",
      "item1": "Default value:&nbsp; 1 (<b>does</b> shrink).",
      "item2": "If you set <b>0</b>, that item will <b>not</b> <b>shrink</b> even if space is lacking.",
      "example": "<p>In this example, we can see how the <b>item</b> with the class <b>child-1</b> does <b>not</b> <b>shrink</b> because its <b>flex-shrink</b> is set to <b>0</b>. In contrast, the other <b>items</b> <b>shrink</b> since their <b>flex-shrink</b> is <b>1</b>.</p>"
    },
    "basis": {
      "title": "<i class='moss bi bi-rulers'></i> flex-basis</span>",
      "description": "This is the <b>base</b> size of the item <b>before</b> growth or shrink is applied.",
      "item1": "By default it is <b>auto</b>, which takes the natural size of the content or the defined width/height.",
      "item2": "It can be a value in px, %, auto, rem, em, etc.",
      "example": "<p>In this example, we can see how each <b>item</b> takes its <b>width</b> according to the value assigned through the <b>flex-basis</b> property.</p>"
    },
    "order": {
      "title": "<i class='moss bi bi-sort-alpha-down'></i> order</span>",
      "description": "Controls the <b>order</b> of the flex <b>items</b>. By default, all have <b>order: 0</b>. Items with a <b>smaller</b> value will appear <b>first</b>.",
      "item1": "An item with <b>order: -1</b> will appear before one with <b>order: 0</b>.",
      "item2": "An item with <b>order: 1</b> will appear after those with <b>order: 0</b>.",
      "example": "<p>In this example, we can see how the <b>items</b> are ordered from <b>lowest to highest</b> according to their <b>order</b> value.</p>"
    }
  },
  "grid": {
    "title": "Grid",
    "description": "<p><b>CSS</b> <span class='brick'><b>Grid</b></span> is a <b>two-dimensional</b> layout system that allows arranging elements into <b>rows</b> and <b>columns</b> precisely, with control over spacing for both rows and columns. <b>Unlike</b> <span class='brick'><b>Flexbox</b></span>, which focuses on distributing items in <b>one</b> <b>direction</b> (row or column), <span class='brick'><b>Grid</b></span> enables full control of layout along <b>both axes</b>. Its big <b>advantage</b> is that you can define <b>complex structures</b> in a <b>simple</b> and <b>adaptable</b> way, with control over the <b>number</b> and <b>size</b> of rows and columns, <b>spacing</b> and <b>alignment</b> of elements, and <b>reorganization</b> of the <b>design</b> depending on screen size or device (<b>responsive</b>).</p>",

    "basics": {
      "title": "<i class='moss bi bi-box'></i> Grid Container & Items",
      "description": "The <b>container</b> is defined with <b>display: grid</b> or <b>display: inline-grid</b>, and its direct <b>children</b> become <b>grid items</b> that are distributed within the grid.",
      "select": "<i class='moss bi bi-hand-index'></i> Select <b>display</b>:",
      "item1": "<b>grid</b>:&nbsp; The container behaves as a block that takes up <b>all</b> the available width.",
      "item2": "<b>inline-grid</b>:&nbsp; The container behaves as an inline element, occupying only the <b>necessary</b> space.",
      "example": "<p>In this dynamic example, we can see how the child elements adjust depending on the value of <b>display</b>.</p>"
    },
    "explicit": {
      "title": "<i class='moss bi bi-grid-1x2'></i> Explicit Grid",
      "description": "This is a layout system where the grid is <b>explicitly defined</b> using <b>grid-template-rows</b> and <b>grid-template-columns</b>.",
      "item1": "<b>Rows</b> and <b>columns</b> are <b>declared</b> directly in the grid.",
      "item2": "No additional rows or columns are created unless <b>items</b> force them (in which case the implicit grid comes into play).",
      "item3": "Ideal for <b>predictable layouts</b>, where the exact number of rows and columns is known in advance.",
      "select": "<i class='moss bi bi-hand-index'></i> Select <b>example</b>:",
      "example": "<p>In this dynamic example, since we <b>do not</b> handle the sizes of <b>rows</b> and <b>columns</b> that are created <b>implicitly</b>, these will <b>take</b> the <b>height</b> and <b>width</b> of the child.</p>"
    },
    "implicit": {
      "title": "<i class='moss bi bi-bounding-box'></i> Implicit Grid",
      "description": "This is a layout system where the grid <b>automatically expands</b> to accommodate elements that don’t fit into the explicitly defined grid.",
      "item1": "<b>Rows</b> or <b>columns</b> not declared in the explicit grid are <b>generated automatically</b>.",
      "item2": "We can use <b>grid-auto-rows</b> or <b>grid-auto-columns</b> to define the size of the implicit rows/columns being created.",
      "item3": "Ideal when the number of <b>elements</b> is <b>dynamic</b> or unknown beforehand.",
      "select": "<i class='moss bi bi-hand-index'></i> Select <b>grid-auto</b>:",
      "example": "<p>In this dynamic example, we can see how an <b>implicit row</b> is created, which takes the height from <b>grid-auto-rows</b>, and how an <b>implicit column</b> is created with its width defined by <b>grid-auto-columns</b>.</p>"
    },
    "autoFlow": {
      "title": "<i class='moss bi bi-shuffle'></i> Grid Auto-Flow",
      "description": "This is the property that controls how <b>items</b> are automatically placed in the grid when their positions are not specified.",
      "item1": "<b>row</b>:&nbsp; (Default value) elements are placed in <b>rows</b>.",
      "item2": "<b>column</b>:&nbsp; Elements are positioned in <b>columns</b>.",
      "item3": "<b>dense</b>:&nbsp; tries to <b>fill gaps</b> by reordering later items.",
      "select": "<i class='moss bi bi-hand-index'></i> Select <b>grid-auto-flow</b>:",
      "example": "<p>In this dynamic example, we can see how items are arranged according to the value of <b>grid-auto-flow</b>.</p>"
    },
    "positioning": {
      "title": "<i class='moss bi bi-arrows-move'></i> Item Positioning",
      "description": "<b>Grid items</b> can occupy specific cells or span multiple rows/columns using dedicated properties.",
      "item1": "<b>grid-column</b> and <b>grid-row</b>:&nbsp; define where an item starts and ends in terms of row/column.",
      "item2": "<b>grid-area</b>:&nbsp; combines start/end row and column in one property.",
      "select": "<i class='moss bi bi-hand-index'></i> Select <b>positioning</b>:",
      "example": "<p>In this dynamic example, using <b>grid-column / grid-row</b> we tell the element with the class <b>positioning</b> to occupy <b>columns</b> 1 and 2, and <b>rows</b> 1 and 2. With <b>grid-area</b>, we tell the element with the class <b>positioning</b> to take <b>rows</b> 1 and 2 and <b>column</b> 3.</p>"
    },
    "areas": {
      "title": "<i class='moss bi bi-layout-text-window-reverse'></i> Grid Template Areas",
      "description": "Allows defining layouts using <b>semantic names</b> for different grid zones.",
      "item1": "The container uses <b>grid-template-areas</b>.",
      "item2": "Each item is assigned with <b>grid-area: name</b>.",
      "example": "In this example, with <b>grid-template-areas</b> we define a layout with 3 rows and 3 columns, where each <b>cell</b> has a <b>semantic name</b>. Then, each item is positioned in the grid by assigning the corresponding <b>name</b> via <b>grid-area</b>."
    },
    "functions": {
      "title": "<i class='moss bi bi-cpu'></i> Useful Functions",
      "description": "Functions that simplify creating dynamic and responsive grids.",
      "item1": "<b>repeat</b> (n, value):&nbsp; avoids writing the same <b>value</b> <b>n</b> times manually.",
      "item2": "<b>minmax</b> (min, max):&nbsp; <b>defines</b> minimum and maximum values.",
      "item3": "<b>auto-fit</b>:&nbsp; tries to <b>fit</b> columns to the container’s <b>width</b>; if there’s extra space, it collapses gaps.",
      "item4": "<b>auto-fill</b>:&nbsp; similar to <b>auto-fit</b>, but leaves <b>empty slots</b> if there aren’t enough items.",
      "example": "In this example, with <b>grid-template-columns: repeat(auto-fit, minmax(70px, 1fr))</b> we create as many columns as fit (auto-fit), each column will be at least 70px, and extra space is distributed proportionally (1fr). With <b>grid-auto-rows: minmax(50px, auto)</b>, each row has a minimum height of 50px."
    },
    "alignment-container": {
      "title": "<i class='moss bi bi-columns-gap'></i> Container Alignment",
      "description": "Properties that control how items are aligned inside each grid cell.",
      "item1": "<b>justify-items</b>:&nbsp; aligns items <b>horizontally</b> within each cell.",
      "item2": "<b>align-items</b>:&nbsp; aligns items <b>vertically</b> within each cell.",
      "item3": "<b>place-items</b>:&nbsp; shorthand to combine <b>justify-items</b> and <b>align-items</b>.",
      "item4": "<h5 class='mt-1 mb-1'>Possible values:</h5>",
      "item5": "<b>stretch</b>:&nbsp; <b>Stretches</b> the item to fill the entire cell (default).",
      "item6": "<b>start</b>:&nbsp; Aligns to the <b>start</b> of the cell (left for horizontal, top for vertical).",
      "item7": "<b>center</b>:&nbsp; <b>Centers</b> the item within the cell.",
      "item8": "<b>end</b>:&nbsp; Aligns to the <b>end</b> of the cell (right for horizontal, bottom for vertical).",
      "selectJustify": "<i class='moss bi bi-hand-index'></i> Select <b>justify-items</b>:",
      "selectAlign": "<i class='moss bi bi-hand-index'></i> Select <b>align-items</b>:",
      "example": "<p>In this dynamic example, we can see the different alignments of cells using <b>justify-items</b> and <b>align-items</b>.</p>"
    },
    "alignment-content": {
      "title": "<i class='moss bi bi-grid'></i> Content Alignment",
      "description": "Properties that control how rows and columns are distributed inside the grid container.",
      "item1": "<b>justify-content</b>:&nbsp; distributes columns <b>horizontally</b> inside the grid.",
      "item2": "<b>align-content</b>:&nbsp; distributes rows <b>vertically</b> inside the grid.",
      "item3": "<b>place-content</b>:&nbsp; shorthand to combine <b>justify-content</b> and <b>align-content</b>.",
      "item4": "<h5 class='mt-1 mb-1'>Possible values:</h5>",
      "item5": "<b>stretch</b>:&nbsp; <b>Stretches</b> rows/columns to fill all available space (default).",
      "item6": "<b>start</b>:&nbsp; Aligns the whole grid to the <b>start</b> of the axis (top or left).",
      "item7": "<b>center</b>:&nbsp; <b>Centers</b> the grid along the axis.",
      "item8": "<b>end</b>:&nbsp; Places all rows/columns at the <b>end</b> of the axis (bottom or right).",
      "item9": "<b>space-around</b>:&nbsp; Distributes space leaving <b>equal margins around each row or column group</b> (edges have half the space of the interior).",
      "item10": "<b>space-between</b>:&nbsp; Distributes rows/columns so the <b>first and last</b> are flush with the edges, and space is distributed only between them.",
      "item11": "<b>space-evenly</b>:&nbsp; Places <b>perfectly equal spaces</b> between all rows/columns and also at the edges.",
      "selectJustify": "<i class='moss bi bi-hand-index'></i> Select <b>justify-content</b>:",
      "selectAlign": "<i class='moss bi bi-hand-index'></i> Select <b>align-content</b>:",
      "example": "<p>In this dynamic example, we can see the different row and column alignments using <b>justify-content</b> and <b>align-content</b>.</p>"
    },
    "alignment-item": {
      "title": "<i class='moss bi bi-pip'></i> Item Alignment",
      "description": "Properties to align an <b>individual</b> item inside its own cell.",
      "item1": "<b>justify-self</b>:&nbsp; aligns an item <b>horizontally</b> in its cell.",
      "item2": "<b>align-self</b>:&nbsp; aligns an item <b>vertically</b> in its cell.",
      "item3": "<b>place-self</b>:&nbsp; shorthand to combine <b>justify-self</b> and <b>align-self</b>.",
      "item4": "<h5 class='mt-1 mb-1'>Possible values:</h5>",
      "item5": "<b>stretch</b>:&nbsp; The item <b>stretches</b> to fill the whole cell along that axis (default).",
      "item6": "<b>start</b>:&nbsp; Aligns to the <b>start</b> of the axis (left in horizontal, top in vertical).",
      "item7": "<b>center</b>:&nbsp; <b>Centers</b> along the axis.",
      "item8": "<b>end</b>:&nbsp; Aligns to the <b>end</b> of the axis (right in horizontal, bottom in vertical).",
      "selectJustify": "<i class='moss bi bi-hand-index'></i> Select <b>justify-self</b>:",
      "selectAlign": "<i class='moss bi bi-hand-index'></i> Select <b>align-self</b>:",
      "example": "<p>In this dynamic example, we can see the different alignments of an item within its own cell using <b>justify-self</b> and <b>align-self</b>.</p>"
    },
    "fixed": {
      "title": "<i class='moss bi bi-grid'></i> Fixed Grid",
      "description": "This is a layout system where the page or interface is organized using a grid with <b>predefined</b> column widths that do not adapt to screen size.",
      "item1": "<b>Rows</b> and <b>columns</b> with <b>fixed sizes</b> (em, px, rem ...).",
      "item2": "Ideal for <b>highly controlled layouts</b> where content and size are <b>predictable</b>.",
      "example": "<p>In this example we have <b>2 rows</b> and a maximum of <b>3 columns</b>. When a <b>fourth element</b> is added, it automatically goes to the next row. With <b>grid-template-rows</b> we define the <b>number</b> of rows and their <b>height</b>, while with <b>grid-template-columns</b> we define the <b>number</b> of columns and their <b>width</b>.</p><p>Additionally, with <b>row-gap</b> we control the spacing between rows, and with <b>column-gap</b> the spacing between columns.</p>"
    },
    "fluid": {
      "title": "<i class='moss bi bi-grid-3x3-gap'></i> Fluid Grid",
      "description": "This is a layout system where the page or interface is organized using a grid with <b>flexible</b> column widths that <b>adapt</b> dynamically to screen size.",
      "item1": "<b>Rows</b> and <b>columns</b> with <b>relative sizes</b> (%, fr, auto ...).",
      "item2": "Ideal for <b>layouts</b> that require <b>adaptability</b> across different <b>devices</b> and resolutions.",
      "example": "<p>In this example, we use <b>grid-template-columns</b> to define the <b>number</b> of columns and their respective <b>widths</b>, but this time they are <b>proportional widths</b> relative to the container’s <b>width</b>. For example, the first column takes <b>50%</b> of the container and the other two <b>share the remaining width</b> based on their <b>fr</b> values.</p><p>With <b>gap</b>, we set the <b>spacing</b> of rows and columns at the same time.</p>"
    },
    "subgrid": {
      "title": "<i class='moss bi bi-diagram-3'></i> Subgrid",
      "description": "It is a feature of <b>CSS Grid level 2</b> that allows a child grid to inherit the row or column definition from the parent grid.",
      "item1": "Used in <b>grid-template-rows</b> or <b>grid-template-columns</b> with the value <b>subgrid</b>.",
      "item2": "The subgrid must span a range of columns or rows from the parent.",
      "example": "<p>In this example, we can see how the <b>content</b> class inherits the column definition from the parent container. To achieve this, we use <b>grid-column: 1 / -1</b>, which makes it occupy all available columns, from the first to the last.</p>"
    },
    "units": {
      "title": "<i class='moss bi bi-123'></i> Units in Grid",
      "description": "Apart from the basic CSS units (px, em, rem, vh, vw...), these are the most commonly used units in CSS <b>Grid</b>:",
      "item1": "<b>fr</b>:&nbsp; fraction of the available space.",
      "item2": "<b>%</b>:&nbsp; relative to the container.",
      "item3": "<b>auto</b>:&nbsp; size based on content.",
      "item4": "<b>min-content</b> / <b>max-content</b>:&nbsp; adjusts to the minimum or maximum content size.",
      "item5": "<b>span</b>:&nbsp; allows an element to span multiple <b>rows</b> or <b>columns</b> based on the specified number.",
      "example": "<p>In this example, we show a series of columns with each of these units, where we can visualize the behavior of each one.</p>"
    },
    "responsive": {
      "title": "<i class='moss bi bi-phone'></i> Responsive with Grid",
      "description": "Strategies to achieve layouts that automatically adapt to different screen sizes.",
      "item1": "<b>Media queries</b>: allow applying conditional CSS styles depending on the screen width.",
      "item2": "<b>@media (max-width: ...)</b>: applies when the screen width is <b>less than or equal</b> to the specified value. Commonly used to adjust layouts on small screens (e.g., mobile).",
      "item3": "<b>@media (min-width: ...)</b>: applies when the screen width is <b>greater than or equal</b> to the specified value. Typically used in <b>mobile-first</b> approaches, where the design is first defined for mobile and then extended for larger screens.",
      "item4": "Use of <b>auto-fit</b> and <b>minmax()</b> to create fluid grids that adapt without media queries, generating as many columns as can fit in the container.",
      "item5": "Use of <b>auto-fill</b>: similar to <b>auto-fit</b>, but keeps empty spaces reserved for columns that do not get filled.",
      "item6": "Combination with <b>grid-template-areas</b>: allows easy reorganization of the layout based on breakpoints by rearranging entire blocks.",
      "item7": "Relative units (<b>fr</b>, <b>%</b>, <b>auto</b>, <b>min-content</b>, <b>max-content</b>) promote flexible behavior on small screens.",
      "item8": "Modern properties like <b>clamp()</b> help set a minimum, ideal, and maximum width without the need for multiple media queries."
    }
  }
}
